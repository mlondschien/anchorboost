import numpy as np
import pytest

def simulate(f, n=100, shift=0, seed=0):
    rng = np.random.RandomState(seed)
    p = 2
    a = rng.normal(size=(n, 2)) + shift
    h = rng.normal(size=(n, 1))
    x_noise = 0.5 * rng.normal(size=(n, p))
    x = x_noise + np.repeat(a[:, 0] + a[:, 1] + 2 * h[:, 0], p).reshape((n, p))
    y_noise = 0.25 * rng.normal(size=n)
    y = f(x[:, 0], x[:, 1]) - 2 * a[:, 0] + 3 * h[:, 0] + y_noise
    return x, y, a

def f1(x2, x3):
    return (x2 <= 0) + (x2 <= -0.5) * (x3 <= 1)

def f2(x2, x3):
    return x2 + x3 + (x2 <= 0) + (x2 <= -0.5) * (x3 <= 1)

@pytest.mark.parametrize("f", [f1, f2])
def test_simulate_shapes_and_values(f):
    n = 50
    x, y, a = simulate(f, n=n, shift=1, seed=42)

    # Check shapes
    assert x.shape == (n, 2), "x should have shape (n, 2)"
    assert y.shape == (n,), "y should have shape (n,)"
    assert a.shape == (n, 2), "a should have shape (n, 2)"

    # Check values are finite
    assert np.all(np.isfinite(x)), "x should have only finite values"
    assert np.all(np.isfinite(y)), "y should have only finite values"
    assert np.all(np.isfinite(a)), "a should have only finite values"

    # Reproducibility test
    x2, y2, a2 = simulate(f, n=n, shift=1, seed=42)
    np.testing.assert_allclose(x, x2)
    np.testing.assert_allclose(y, y2)
    np.testing.assert_allclose(a, a2)
